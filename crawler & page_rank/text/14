 skip to main content vox product blog homepage log in or sign up log in sign up site search search vox product blog main menu projects news perspectives careers our team about vox media more projects news perspectives careers our team about vox media filed under managing complex object inputs with wrapper classes in javascript a quick tip for handling raw input in your software library by josh larson aug am edt share this story share this on facebook share this on twitter share this on reddit share all sharing options share all sharing options for managing complex object inputs with wrapper classes in javascript linkedin reddit flipboard pocket email we can t always get what we want this is especially true for engineers building scalable revenue impacting software whether we re parsing ad slot configuration or generating the creative for a custom ad we often find ourselves accepting a large json object as an object input sometimes this means passing the object around to multiple methods the object might become mutated over time or take on different responsibilities however we lose the context of the initial input data as we pass it around to different methods modules or even files it can get pretty hairy pretty quickly let s start with a simple example this is a theoretical script that accepts a json payload of experiment configurations required for us to run an a b test in our library the primary method runexperiment is responsible for calling other methods to filter out inactive experiments and to finally act on a chosen experiment see the pen wrapper classes before by joshua p larson jplhomer on codepen notice how the raw javascript configuration object is passed between multiple functions in the getactiveexperiments function we also have to manually convert a timestamp to a javascript date object in order to make a comparison finally in the pickexperiment function we are referencing multiple properties from the raw object using snake case if this object were more complex or if we were dealing with multiple modules spread across a larger software library we could begin to lose our place when reading through each function it s important to know the shape of our input data and what properties we have available refactoring into a wrapper class let s refactor what we have above this time we ll use a wrapper class to give our input data some structure see the pen wrapper classes after by joshua p larson jplhomer on codepen we start by creating a new javascript class called experiment the constructor of this class accepts our raw json input and assigns it to a private we re using vanilla javascript here so no real support for visibility instance variable called data next we create a few getters on the class like start id and variantid these provide a convenient access pattern for data without having to reach deep into a raw object and they allow us to transition to camelcase which better fits our coding style additionally notice that the start getter casts the value of the start date to an actual javascript date object this helps define the shape of our wrapper class and ensures any consumers that the variable they re trying to access will already be a date the wrapper class pattern allows us to create new properties that didn t already exist on the object like isactive and key these helpers let us perform calculations on existing object in the form of a getter this reminds me a lot of vue s computed properties though it s important to note that getters will re run their logic each time they are called where vue s computed properties are memoized finally we add a method to our wrapper class called dosomethingwiththisexperiment we can encapsulate any methods like this which are sole responsibilities of the experiment object by placing them directly in the class while this wrapper class is a little more work up front we are able to simplify our business logic below we re able to remove an entire function and make the code more readable level up refactoring with typescript for some extra fun we can convert this code into typescript instead of javascript with only a few small changes by defining an interface we can more safely parse the raw json object into the class see the pen wrapper classes typescript by joshua p larson jplhomer on codepen typescript will throw an error during compilation if we try to access a non existent property on the input object it also allows us to use private instance variables which means no more underscore on our property name a word of caution typescript validates types at compile time but it outputs standard javascript this means a change to the shape of the raw json data in production would not be caught by typescript your mileage may vary wrapper classes the good and the bad to recap the wrapper class pattern seems to shine in a few ways types as software developers we can control the shape of our wrapper class and the data types it contains instead of adhering to the shape of json input we ve received from another service convenience by using getters and encapsulated methods we have direct access to the data we need without having to use dot notation or utility functions documentation this may be a personal preference but it s easier to reference a wrapper class within a project than to print out an entire json object example in a comment to describe what data is available plus modern editors like vs code will provide autocomplete functionality to consumers of the wrapper class immutability by providing your data as getters your wrapper acts as an immutable object this means that unless you provide an explicit setter an error will be thrown if a consumer tries to modify a property on your wrapper class this helps prevent unintended consequences and side effects future proof once we ve defined an interface in the form of a wrapper class we can continue to iterate on the implementation of the class without worrying that we ll break anything there are some trade offs though here are some things to consider before diving in cost while javascript classes are supported in most modern browsers you may need to transpile them using something like babel in order to support older browsers testing if you re writing unit tests that used to accept raw json data as input you ll need to remember to instantiate your wrapper class each time and pass that to the methods instead this might feel cumbersome or unnecessary while testing speed if you re quickly prototyping something you might feel impeded by wrapper classes they might be a better choice if you re not in the middle of a code spike that s all i have on wrapper classes i hope you find this pattern useful the latest vox media on facebook vox media on twitter vox media on linked in privacy notice cookie policy do not sell or share my personal info terms of use security accessibility vox media llc all rights reserved contact us share this story twitter facebook 